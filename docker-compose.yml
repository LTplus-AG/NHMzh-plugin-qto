version: "3.8"

services:
  broker:
    image: ${KAFKA_IMAGE:-confluentinc/cp-kafka:7.4.0}
    hostname: ${KAFKA_BROKER_HOSTNAME:-broker}
    container_name: ${KAFKA_CONTAINER_NAME:-kafka-broker}
    restart: unless-stopped
    ports:
      - "${KAFKA_EXTERNAL_LISTENER_PORT:-9092}:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://${KAFKA_BROKER_HOSTNAME:-broker}:29092,PLAINTEXT_HOST://${KAFKA_BROKER_URL:-localhost}:${KAFKA_EXTERNAL_LISTENER_PORT:-9092}"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@${KAFKA_BROKER_HOSTNAME:-broker}:29093"
      KAFKA_LISTENERS: "PLAINTEXT://${KAFKA_BROKER_HOSTNAME:-broker}:29092,CONTROLLER://${KAFKA_BROKER_HOSTNAME:-broker}:29093,PLAINTEXT_HOST://0.0.0.0:9092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
    networks:
      - ${NETWORK_NAME:-nhm-network}

  kafka-ui:
    image: ${KAFKA_UI_IMAGE:-provectuslabs/kafka-ui:latest}
    container_name: ${KAFKA_UI_CONTAINER_NAME:-kafka-ui}
    hostname: ${KAFKA_UI_HOSTNAME:-kafka-ui}
    restart: unless-stopped
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_BROKER_HOSTNAME:-broker}:29092
      KAFKA_CLUSTERS_0_KRAFT_ENABLED: "true"
    ports:
      - "${KAFKA_UI_PORT:-8080}:8080"
    networks:
      - ${NETWORK_NAME:-nhm-network}
    depends_on:
      - broker

  qto-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: qto-backend
    hostname: qto-backend
    restart: unless-stopped
    environment:
      KAFKA_BROKER: broker:29092
      KAFKA_QTO_TOPIC: ${KAFKA_QTO_TOPIC:-qto-elements}
      CORS_ORIGINS: "${CORS_ORIGINS:-http://localhost:3004,http://localhost:80,http://frontend:3004,http://frontend:80}"
      TARGET_IFC_CLASSES: "${TARGET_IFC_CLASSES}"
    volumes:
      - ./backend:/app
      - backend-temp:/app/temp
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - ${NETWORK_NAME:-nhm-network}
    depends_on:
      - broker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Development frontend
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: dev
    container_name: qto-frontend-dev
    environment:
      VITE_API_URL: ${API_URL:-http://localhost:8000}
    ports:
      - "${FRONTEND_PORT:-3004}:3004"
    volumes:
      - ./:/app
      - /app/node_modules
    networks:
      - ${NETWORK_NAME:-nhm-network}
    depends_on:
      - qto-backend

  qto-ifc-msg:
    build:
      context: ./qto_ifc-msg
      dockerfile: Dockerfile
    depends_on:
      - qto-backend
      - broker
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-development}
      KAFKA_BROKER: broker:29092
      KAFKA_IFC_TOPIC: ${KAFKA_IFC_TOPIC:-ifc-files}
      BACKEND_URL: http://qto-backend:8000
      MINIO_ENDPOINT: minio:9000
      MINIO_PORT: 9000
      MINIO_USE_SSL: false
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-ROOTUSER}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-CHANGEME123}
      MINIO_IFC_BUCKET: ${MINIO_IFC_BUCKET:-ifc-files}
    networks:
      - ${NETWORK_NAME:-nhm-network}
    restart: on-failure
    

volumes:
  backend-temp:
    name: ${BACKEND_TEMP_VOL:-qto-backend-temp}

networks:
  nhm-network:
    name: ${NETWORK_NAME:-nhm-network}
    driver: bridge
